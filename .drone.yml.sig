eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgcGFja2FnZXM6CiAgICAjIGNhdCBpbWFnZXMvcGFja2FnZXIuZGtyIHwgZG9ja2VyIGJ1aWxkIC0tdGFnPWdjci5pby9rdWJlYWRtL2NpLXBhY2thZ2VyOmxhdGVzdCAtCiAgICBpbWFnZTogZ2NyLmlvL2t1YmVhZG0vY2ktcGFja2FnZXI6bGF0ZXN0CiAgICBjb21tYW5kczoKICAgICAgIyBUT0RPOiB3ZSBjYW4gcHJvYmFibHkgY2FjaGUgdXBzdHJlYW0gYXMgcmVmZXJlbmNlIG9yIHNvbWV0aGluZywgaWYgaXQgdGFrZXMgdG9vIGxvbmcgdG8gY2xvbmUKICAgICAgLSBta2RpciAkR09QQVRIL3NyYy9rOHMuaW8vCiAgICAgIC0gc3JjPSRHT1BBVEgvc3JjL2s4cy5pby9rdWJlcm5ldGVzCiAgICAgIC0gZ2l0IGNsb25lIC0tYnJhbmNoIG1hc3RlciAtLXF1aWV0IC0tc2luZ2xlLWJyYW5jaCBodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9rdWJlcm5ldGVzICRzcmMKICAgICAgLSBtYWtlIC1DICRzcmMgV0hBVD0iY21kL2t1YmVsZXQgY21kL2t1YmVjdGwgY21kL2t1YmVhZG0iCiAgICAgIC0gbWFrZSBwYWNrYWdlcy1mcm9tLWxvY2FsLWJ1aWxkLW91dHB1dAogICAgICAtIG1ha2UgY29weS1kZWItcGFja2FnZXMKICAgICAgIy0gbWFrZSBjb3B5LXJwbS1wYWNrYWdlcwogICAgICAjLSBtYWtlIC1DICRzcmMgV0hBVD0iY21kL2t1YmUtYXBpc2VydmVyIGNtZC9rdWJlLWNvbnRyb2xsZXItbWFuYWdlciBjbWQva3ViZS1kaXNjb3ZlcnkgY21kL2t1YmUtcHJveHkgcGx1Z2luL2NtZC9rdWJlLXNjaGVkdWxlciIKICAgICAgLSBtYWtlIC1DICRzcmMgV0hBVD0iY21kL2h5cGVya3ViZSIKICAgICAgLSBtYWtlIGNvcHktYmluYXJpZXMtZm9yLWRvY2tlci1pbWFnZXMKCiAgeGVuaWFsOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBnY3IuaW8va3ViZWFkbS9jaS14ZW5pYWwtc3lzdGVtZAogICAgY29udGV4dDogaW1hZ2VzCiAgICBkb2NrZXJmaWxlOiBpbWFnZXMveGVuaWFsLXN5c3RlbWQtdGVzdC5ka3IKICAgIHRhZzoKICAgICAgLSB0ZXN0LSR7RFJPTkVfQlJBTkNIfS1sYXRlc3QKICAgICAgLSB0ZXN0LSR7RFJPTkVfQlJBTkNIfS0ke0RST05FX0NPTU1JVH0tJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CgogIGh5cGVya3ViZS1pbWFnZToKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogZ2NyLmlvL2t1YmVhZG0vaHlwZXJrdWJlLWFtZDY0CiAgICBjb250ZXh0OiBpbWFnZXMva3ViZS1jbHVzdGVyLWNvbXBvbmVudHMKICAgIGRvY2tlcmZpbGU6IGltYWdlcy9rdWJlLWNsdXN0ZXItY29tcG9uZW50cy9Eb2NrZXJmaWxlCiAgICBidWlsZF9hcmdzOgogICAgICAtIGJpbmFyeT1oeXBlcmt1YmUKICAgIHRhZzoKICAgICAgLSB0ZXN0LSR7RFJPTkVfQlJBTkNIfS1sYXRlc3QKICAgICAgLSB0ZXN0LSR7RFJPTkVfQlJBTkNIfS0ke0RST05FX0NPTU1JVH0tJHtEUk9ORV9CVUlMRF9OVU1CRVJ9Cg.Myhkgb7gmD4ehrFyF2f9iampyAojz4YgYoi0ZMqx0OA